# Generated by Django 3.2.4 on 2022-01-12 12:30

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import streams.blocks
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0016_articleseriespage_series_items_disclaimer'),
        ('publications', '0008_add_feature_url'),
        ('events', '0012_add_feature_url'),
        ('annual_reports', '0009_merge_20220112_0141'),
    ]

    operations = [
        migrations.AlterField(
            model_name='contentslidepage',
            name='links',
            field=wagtail.core.fields.StreamField([('link', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.RichTextBlock(features=['bold', 'italic'], required=True)), ('url', wagtail.core.blocks.URLBlock(required=True)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('EVENT', 'Event'), ('MEDIA', 'Media'), ('OPINION', 'Opinion'), ('PODCAST', 'Podcast'), ('PUBLICATION', 'Publication'), ('VIDEO', 'Video'), ('Experts', 'Experts'), ('SUBSCRIBE', 'Subscribe'), ('PARTNERS', 'Partners')], verbose_name='Type'))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='contentslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='messageslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='outputsandactivitiesslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='summaryslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='tabbedslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.AlterField(
            model_name='timelineslidepage',
            name='quote',
            field=wagtail.core.fields.StreamField([('quote', wagtail.core.blocks.StructBlock([('message', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Message', required=True)), ('subtitle', streams.blocks.ParagraphBlock(features=['bold', 'italic', 'link'], label='Subtitle', required=False))]))], blank=True),
        ),
        migrations.CreateModel(
            name='OutputsAndActivitiesSlidePagePublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications', to='annual_reports.outputsandactivitiesslidepage')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='publications.publicationpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutputsAndActivitiesSlidePageOpinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('opinion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='articles.articlepage')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='opinions', to='annual_reports.outputsandactivitiesslidepage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutputsAndActivitiesSlidePageEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='events.eventpage')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='annual_reports.outputsandactivitiesslidepage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
