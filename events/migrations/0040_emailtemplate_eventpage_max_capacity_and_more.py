# Generated by Django 5.0.6 on 2025-08-21 14:45

import django.db.models.deletion
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0039_alter_eventlistpage_body_alter_eventpage_body'),
        ('wagtaildocs', '0014_alter_document_file_size'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('subject', models.CharField(max_length=200)),
                ('body', wagtail.fields.StreamField([('paragraph', 0), ('attachment_hint', 2)], block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {'features': ['bold', 'italic', 'link', 'ul', 'ol']}), 1: ('wagtail.blocks.TextBlock', (), {'required': False}), 2: ('wagtail.blocks.StructBlock', [[('note', 1)]], {'icon': 'paperclip', 'label': 'Attachment Hint (nonâ€‘rendered)'})})),
                ('merge_vars_help', models.TextField(blank=True)),
            ],
        ),
        migrations.AddField(
            model_name='eventpage',
            name='max_capacity',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='registration_open',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='EmailCampaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_for', models.DateTimeField()),
                ('include_statuses', models.JSONField(default=list)),
                ('include_type_ids', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attachment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='wagtaildocs.document')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_campaigns', to='events.eventpage')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.emailtemplate')),
            ],
        ),
        migrations.AddField(
            model_name='eventpage',
            name='confirmation_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='events.emailtemplate'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='reminder_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='events.emailtemplate'),
        ),
        migrations.CreateModel(
            name='RegistrationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(max_length=120)),
                ('slug', models.SlugField(max_length=140)),
                ('capacity', models.PositiveIntegerField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True, help_text='If False, only invitees can see/use.')),
                ('custom_confirmation_text', wagtail.fields.RichTextField(blank=True)),
                ('event', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='registration_types', to='events.eventpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegistrationFormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('event', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='events.eventpage')),
                ('required_for_types', models.ManyToManyField(blank=True, help_text='If set, this field is required for these types only.', related_name='+', to='events.registrationtype')),
                ('show_for_types', models.ManyToManyField(blank=True, to='events.registrationtype')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('max_uses', models.PositiveIntegerField(default=1)),
                ('used_count', models.PositiveIntegerField(default=0)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invites', to='events.eventpage')),
                ('allowed_types', models.ManyToManyField(blank=True, to='events.registrationtype')),
            ],
        ),
        migrations.CreateModel(
            name='Registrant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(blank=True, max_length=120)),
                ('last_name', models.CharField(blank=True, max_length=120)),
                ('answers', models.JSONField(blank=True, default=dict)),
                ('uploaded_document_ids', models.JSONField(blank=True, default=list)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('waitlisted', 'Waitlisted'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrants', to='events.eventpage')),
                ('invite', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='events.invite')),
                ('registration_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='events.registrationtype')),
            ],
            options={
                'unique_together': {('event', 'email', 'registration_type')},
            },
        ),
    ]
