# Generated by Django 3.1.7 on 2021-03-02 17:16

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import streams.blocks
import wagtail.contrib.table_block.blocks
import wagtail.blocks
import wagtail.fields
import wagtail.documents.blocks
import wagtail.images.blocks
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0052_pagelogentry'),
        ('wagtailimages', '0023_add_choose_permissions'),
        ('wagtaildocs', '0012_uploadeddocument'),
    ]

    operations = [
        migrations.CreateModel(
            name='PeoplePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Person List Page',
                'verbose_name_plural': 'Person List Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PersonListPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('block_quote', wagtail.blocks.StructBlock([('quote', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link'], required=True)), ('quote_author', wagtail.blocks.CharBlock(required=False)), ('author_title', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('link_url', wagtail.blocks.URLBlock(required=False)), ('link_text', wagtail.blocks.CharBlock(required=False))])), ('embedded_multimedia', wagtail.blocks.StructBlock([('multimedia_url', wagtail.blocks.URLBlock(required=True)), ('title', wagtail.blocks.CharBlock(required=False))])), ('embedded_video', wagtail.blocks.StructBlock([('video_url', wagtail.blocks.URLBlock(required=True)), ('caption', wagtail.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(required=False)), ('aspect_ratio', wagtail.blocks.ChoiceBlock(choices=[('none', 'None'), ('landscape', 'Landscape'), ('square', 'Square')]))])), ('image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('hide_image_caption', wagtail.blocks.BooleanBlock(required=False))])), ('inline_video', streams.blocks.InlineVideoBlock(page_type=['multimedia.MultimediaPage'])), ('paragraph', streams.blocks.ParagraphBlock()), ('table', wagtail.contrib.table_block.blocks.TableBlock()), ('text_background_block', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link']))], blank=True)),
                ('hero_link', wagtail.fields.StreamField([('hero_link', wagtail.blocks.StructBlock([('hero_link_text', wagtail.blocks.CharBlock(required=True)), ('hero_link_url', wagtail.blocks.CharBlock(required=True)), ('hero_link_icon', wagtail.blocks.CharBlock(help_text='Use a font-awesome icon name such as fa-envelope', required=False))])), ('hero_document', wagtail.blocks.StructBlock([('hero_link_text', wagtail.blocks.CharBlock(required=True)), ('hero_link_document', wagtail.documents.blocks.DocumentChooserBlock(required=True)), ('hero_link_icon', wagtail.blocks.CharBlock(help_text='Use a font-awesome icon name such as fa-envelope', required=False))]))], blank=True, help_text='Text with link to url, email or document and optional icon that appears below the page title in the hero section.')),
                ('subtitle', wagtail.fields.RichTextField(blank=True)),
                ('person_list_page_type', models.IntegerField(choices=[(0, 'Default'), (1, 'Experts'), (2, 'Staff'), (3, 'Leadership')], default=0)),
            ],
            options={
                'verbose_name': 'Person List Page',
                'verbose_name_plural': 'Person List Pages',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='PersonPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('search_terms', wagtail.fields.StreamField([('search_term', wagtail.blocks.CharBlock())], blank=True, help_text='A list of search terms for which this page will be elevated in the search results.')),
                ('archive', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0)),
                ('address_city', models.CharField(blank=True, max_length=255)),
                ('address_country', models.CharField(blank=True, max_length=255)),
                ('address_line1', models.CharField(blank=True, max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255)),
                ('address_postal_code', models.CharField(blank=True, max_length=32)),
                ('address_province', models.CharField(blank=True, max_length=255)),
                ('board_position', models.CharField(blank=True, max_length=255)),
                ('body', wagtail.fields.StreamField([('paragraph', streams.blocks.ParagraphBlock())], blank=True, verbose_name='Full Biography')),
                ('byline', wagtail.fields.RichTextField(blank=True)),
                ('education', wagtail.fields.StreamField([('education', wagtail.blocks.StructBlock([('degree', wagtail.blocks.CharBlock(required=True)), ('school', wagtail.blocks.CharBlock(required=True)), ('school_website', wagtail.blocks.URLBlock(required=False)), ('year', wagtail.blocks.IntegerBlock(required=False))]))], blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('expertise', wagtail.fields.StreamField([('expertise', wagtail.blocks.CharBlock(required=True))], blank=True)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('languages', wagtail.fields.StreamField([('language', wagtail.blocks.CharBlock(required=True))], blank=True)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('linkedin_url', models.URLField(blank=True)),
                ('person_weight', models.IntegerField(default=0)),
                ('phone_number', models.CharField(blank=True, max_length=32)),
                ('position', models.CharField(blank=True, max_length=255)),
                ('short_bio', wagtail.fields.RichTextField(blank=True, verbose_name='Short Biography')),
                ('external_publications', wagtail.fields.StreamField([('external_publication', wagtail.blocks.StructBlock([('author', wagtail.blocks.CharBlock(required=True)), ('location_in_work', wagtail.blocks.CharBlock(required=False)), ('publisher_info', wagtail.blocks.CharBlock(required=False)), ('publication_type', wagtail.blocks.ChoiceBlock(choices=[('Generic', 'Generic'), ('Book', 'Book'), ('Book Section', 'Book Section'), ('Edited Book', 'Edited Book'), ('Electronic Article', 'Electronic Article'), ('Electronic Book', 'Electronic Book'), ('Journal Article', 'Journal Article'), ('Newspaper Article', 'Newspaper Article'), ('Report', 'Report'), ('Thesis', 'Thesis'), ('Web Page', 'Web Page')])), ('secondary_author', wagtail.blocks.CharBlock(required=False)), ('secondary_title', wagtail.blocks.CharBlock(required=False)), ('title', wagtail.blocks.CharBlock(required=False)), ('url', wagtail.blocks.URLBlock(required=False)), ('url_title', wagtail.blocks.CharBlock(required=False)), ('year', wagtail.blocks.IntegerBlock(required=False))]))], blank=True)),
                ('twitter_username', models.CharField(blank=True, max_length=255)),
                ('website', models.URLField(blank=True)),
                ('drupal_node_id', models.IntegerField(blank=True, null=True)),
                ('curriculum_vitae', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
                ('image_media', models.ForeignKey(blank=True, help_text="A high resolution image that is downloadable from the expert's page.", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Media photo')),
                ('image_square', models.ForeignKey(blank=True, help_text='For circular profile images that are used throughout the website.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Square image')),
            ],
            options={
                'verbose_name': 'Person Page',
                'verbose_name_plural': 'Person Pages',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='PersonType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('drupal_taxonomy_id', models.IntegerField(blank=True, null=True)),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='PersonPageRecommendedContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('person_page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommended', to='people.personpage')),
                ('recommended_content_page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.page', verbose_name='Recommended Content')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='personpage',
            name='person_types',
            field=modelcluster.fields.ParentalManyToManyField(blank=True, to='people.PersonType'),
        ),
    ]
